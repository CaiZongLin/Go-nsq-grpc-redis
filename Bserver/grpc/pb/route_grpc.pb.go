// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: route.proto

package route

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceServerClient is the client API for ServiceServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceServerClient interface {
	RedisUserBuyCount(ctx context.Context, in *BuyRequest, opts ...grpc.CallOption) (*StatusReply, error)
	RedisProductionBuyCount(ctx context.Context, in *BuyRequest, opts ...grpc.CallOption) (*StatusReply, error)
}

type serviceServerClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceServerClient(cc grpc.ClientConnInterface) ServiceServerClient {
	return &serviceServerClient{cc}
}

func (c *serviceServerClient) RedisUserBuyCount(ctx context.Context, in *BuyRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/route.ServiceServer/RedisUserBuyCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceServerClient) RedisProductionBuyCount(ctx context.Context, in *BuyRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/route.ServiceServer/RedisProductionBuyCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServerServer is the server API for ServiceServer service.
// All implementations must embed UnimplementedServiceServerServer
// for forward compatibility
type ServiceServerServer interface {
	RedisUserBuyCount(context.Context, *BuyRequest) (*StatusReply, error)
	RedisProductionBuyCount(context.Context, *BuyRequest) (*StatusReply, error)
	mustEmbedUnimplementedServiceServerServer()
}

// UnimplementedServiceServerServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServerServer struct {
}

func (UnimplementedServiceServerServer) RedisUserBuyCount(context.Context, *BuyRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedisUserBuyCount not implemented")
}
func (UnimplementedServiceServerServer) RedisProductionBuyCount(context.Context, *BuyRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedisProductionBuyCount not implemented")
}
func (UnimplementedServiceServerServer) mustEmbedUnimplementedServiceServerServer() {}

// UnsafeServiceServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServerServer will
// result in compilation errors.
type UnsafeServiceServerServer interface {
	mustEmbedUnimplementedServiceServerServer()
}

func RegisterServiceServerServer(s grpc.ServiceRegistrar, srv ServiceServerServer) {
	s.RegisterService(&ServiceServer_ServiceDesc, srv)
}

func _ServiceServer_RedisUserBuyCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServerServer).RedisUserBuyCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/route.ServiceServer/RedisUserBuyCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServerServer).RedisUserBuyCount(ctx, req.(*BuyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceServer_RedisProductionBuyCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServerServer).RedisProductionBuyCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/route.ServiceServer/RedisProductionBuyCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServerServer).RedisProductionBuyCount(ctx, req.(*BuyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceServer_ServiceDesc is the grpc.ServiceDesc for ServiceServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "route.ServiceServer",
	HandlerType: (*ServiceServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RedisUserBuyCount",
			Handler:    _ServiceServer_RedisUserBuyCount_Handler,
		},
		{
			MethodName: "RedisProductionBuyCount",
			Handler:    _ServiceServer_RedisProductionBuyCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "route.proto",
}
